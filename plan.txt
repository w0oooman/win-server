        1、把核心封装起来  //ok
        2、加入timer、log、LUA、mysql 模块  // log、mysql、timer、LUA
3、核心的 心跳、群发、分布式客户端socket封装、分布式处理、数据加密解密、序列化/反序列化 等 //群发 心跳 分布式客户端socket封装
4、封装玩家 类;玩家退出，释放玩家数据时，遍历方式待优化  // 封装玩家 类OK，优化还未做
         5、WSASendData，考虑对一个连接使用多个OverLapped结构，而不是现在的一个连接只有一个!这可能导致数据不能及时发送给前端!!!(不会)
         6、CTCPSocket会不会出现数据不释放的情况，当前端断开socket后，后端还有数据未发送时(OK)

         7、roundindex是否还有存在的必要？（已经有判断bRecving_和bSending_是否为false的情况!）(还是有存在的必要!!--把要处理的数据放入逻辑队列中，此时客户端
         退出，bRecving_和bSending_也正好为false，则当前连接A数据全部被清理，新的客户端连接进来，把A分配给它，此时，前一个连接放入队列的的数据得到处理，由
         index得到连接B，而我的程序中一个连接的index是不变的，所以A==B!,如果不用roundindex，则此时会发送数据给新连接进来的玩家，然后玩家一脸懵逼...)

         8、SendBatchData时，当有连接此时断开，触发SocketArray_顺序发生变化，此时群发数据是否会出现某些问题？比如有玩家漏发或多发等!(OK)
         9、所有new操作加异常机制（OK了）
         10、send数据时获取overlapped结构要优化 (取消，以前功能可行)
         11、初始化不直接把所有玩家的数据都分配出来，还是来一个分配一个吧(OK)
12、 CSocketArray::FreeItem中玩家过多时，memmove效率优化,CSocketArray FreeItem时,如果nNowMaxCount_>3*nActiveCount_，则释放一部分数据，避免浪费太多内存
         13、测试:5个开一次，开了后关几个再开,循环几次可重现bug:客户端发送了100次却接收不到100次（改socketarray改出来的bug，现在OK）
         14、考虑把发送 接收分别2个锁换成一个锁，因为其实发送和接收函数都操作了共享变量,可能存在风险!!（分别一个锁没问题）
         15、取消消息头的handID--因为感觉有点浪费(已取消)

         16、测试的时候出现“WSASendData close.”，还需要慎重分析下，后来一直没重现!!!(VS开启线程调试可以重现!!见17.)

    17、的确存在6的情况(线程调试验证!!--当sendbuf数据发送完成运行到OnSendComplete且未进入send锁时切换到其它线程冻结此线程，此时又有数据被放入sendbuf中，然后关闭客户端，
    服务器响应OnRecvComplete后调用CloseSocket，因为此时bSending_为真所以还没有真正清除掉SocketArray的数据。此时，放开被冻结的线程OnSendComplete继续运行
    到WSASendData，因为刚才有新数据放入到sendbuf，所以会运行WSASend，但前面CloseSocket已经关闭了socket，所以这里WSASend失败返回(出现16的情况)。至此，此连接一直没释放),
    正在想办法.(1、准备采用CloseSocketEx和心跳来解决这个问题  2、改用send recv公用一把锁即可解决 3、今天(2017-3-27)发现并不会出现不是放TCPSocket的情况!双锁改成单锁只是
    防止出现死锁的情况(其实双锁也不一定会死锁,只是当时自己没处理好而已!死锁过程:若已经在调用CloseSocket(包含RecvLock->SendLock)未进入SendLock，此时而WSASend失败时也会调
    用CloseSocket,而WSASend是在SendLock锁下执行的,此时需要进入CloseSocket需要进入RecvLock,从而形成死锁!!解决办法是WSASend失败时不调用CloseSocket,只是更改相应标志位即可)
    而采用心跳既能关闭、释放已经断开链接的资源，不管是前端正常断开还是拔网线等异常断开的方式.现在考虑把单锁改会双锁，慎重处理防止死锁情况,测试发现
    双锁并不一定比单锁快，不知道是不是测试方法有问题...)

    18、测试下是一把锁还是两把锁效率高？(见png图片)

    19、程序改成Release版本，如果“Maximize Speed (/O2)”这样设置程序会崩溃!!!不知道什么原因!!(OK,发现是由于POPHead返回指针的引用造成的，取消引用，直接返回指针OK。可能是编译器优化时做了什么特殊处理吧)

    20、使用无锁队列(OK)

    21、队列处理的数据结构有待优化!!(OK)

    22、try catch据说不要用得太多!!Onrecvcomplete是否要优化下?(稍微优化了下)

    23、线程退出做下处理,预防类已经析构了，线程还在运行,进而出错(可以用智能指针处理,目前用的事件处理)

24、群发时，数据加密/解密 序列化等记得特殊处理，不必在SendData里序列化,应该先序列化好再SendData

    25、分布式时，timer不用单例，取消以前的服务器单例定时器（OK）

    26、定时器类需要完善,不是定时到了，就自动删除，应该不删除，除非有回调函数且timerID==0，且还要提供移除所有定时器的接口!!(改OK了，接口也加了)

27、运用在项目中的时候，注意：1、某些工程要设置成release的最大优化，而不是静止优化! 
                              2、LUA工程设置了生成预处理文件,注意取消

    28、LUA数据序列化后存数据库的处理,开服加载数据库数据反序列化到LUA,并保证各种系统下都能正常序列化(韩文/日文等等)  //序列化/反序列化（自己写了一个,可用,见工程LUA工程）

29、实现AOI算法

    30、加入lua的CJSON库(OK，CJSON和LUA的json都有)

    31、写一个简单的编译器（OK）

32、使用可靠的第三方UDP库(UDT? RUDP?等等)写一个网络库

    33、实现协程(OK了,详见"协程学习")

34、弄清楚场景服务器、地图、跳转等的设计

35、IPV4/IPV6 网络层实现

36、mysql集群、主从配置


37、构造服务器架构:网关服+登录服+游戏服+DB服(redis+mysql),今天(2017-4-1)觉得可以深化一下!要实现跨服通信或全球同服,可增加一个
    游戏管理服!即:网关服+登录服+游戏服+DB服(redis+mysql)+游戏管理服,为了方便拉取网关服务器列表，可以增加一个中心服,各个网关
    服都与之相连!网关服务端可与多个游戏服务端相连(相当于在不同房间,实际使用的是同一个数据库)具体实现如下:
    
           (s)     (s)  (c)       (c)   (s)    
client   ->   gateway -> LoginServer -> DBServer
   |           |(s) |(s)
   |(s)        |    |(c)
CenterServer   |(c) GameServer2
               GameServer1

注:s表示此服务器服务端,c表示此服务器作为客户端,client表示用户端.


    38、考虑把消息改成类模式，而不是define消息ID？(改了)

39、考虑LUA数据不采用序列化的形式，而是使用userdata?

40、对于现在做的这套服务器，关于分布式集群，可以做一个中心服务器，用来选择要连接的服务器(网关服务器)

    41、多线程log与单线程log分开不同文件处理，多线程加锁，单线程不加锁!!(OK)


100、开发的时候记得编译的时候由 Disable改为最大优化!!!








1、可以看看别人的序列化/反序列化
2、看别人的网络库，分析其优点，看下别人的协程怎么实现的
3、写windows和linux同时实用的网络库
4、看LUA源码，学习：垃圾回收等等若干知识